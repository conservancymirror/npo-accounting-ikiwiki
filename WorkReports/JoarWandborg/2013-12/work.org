q#+LaTeX_CLASS: djcb-org-article
#+TITLE: Consulting Services for Software Freedom Conservancy done in December 2013

* 2013-12-02
** Evaluations
   CLOCK: [2013-12-02 Mon 15:00]--[2013-12-02 Mon 15:28] =>  0:28
   CLOCK: [2013-12-02 Mon 14:34]--[2013-12-02 Mon 15:00] =>  0:26
*** Adempiere
    CLOCK: [2013-12-02 Mon 14:32]--[2013-12-02 Mon 14:34] =>  0:02
* 2013-12-03
  CLOCK: [2013-12-03 Tue 16:22]--[2013-12-03 Tue 16:22] =>  0:00
** Concerns re: accounting API
   CLOCK: [2013-12-04 Wed 00:13]--[2013-12-04 Wed 00:43] =>  0:30
   CLOCK: [2013-12-03 Tue 20:37]--[2013-12-03 Tue 21:53] =>  1:16
   CLOCK: [2013-12-03 Tue 19:45]--[2013-12-03 Tue 20:36] =>  0:51
   CLOCK: [2013-12-03 Tue 20:36]--[2013-12-03 Tue 20:37] =>  0:01
   CLOCK: [2013-12-03 Tue 16:22]--[2013-12-03 Tue 17:59] =>  1:37
* 2013-12-04
** Accounting API
   CLOCK: [2013-12-05 Thu 00:15]--[2013-12-05 Thu 00:29] =>  0:14
   CLOCK: [2013-12-04 Wed 23:39]--[2013-12-05 Thu 00:14] =>  0:35
   CLOCK: [2013-12-04 Wed 15:07]--[2013-12-04 Wed 15:14] =>  0:07
** Evaluations
   CLOCK: [2013-12-05 Thu 00:15]--[2013-12-05 Thu 00:15] =>  0:00
   CLOCK: [2013-12-04 Wed 22:03]--[2013-12-04 Wed 23:39] =>  1:36
   CLOCK: [2013-12-04 Wed 17:16]--[2013-12-04 Wed 17:27] =>  0:11
   CLOCK: [2013-12-04 Wed 16:15]--[2013-12-04 Wed 16:39] =>  0:24
   CLOCK: [2013-12-04 Wed 15:14]--[2013-12-04 Wed 15:59] =>  0:45
* 2013-12-05
** Accounting API
  CLOCK: [2013-12-05 Thu 17:06]--[2013-12-05 Thu 18:13] =>  1:07
** Evaluations
   CLOCK: [2013-12-05 Thu 22:18]--[2013-12-05 Thu 22:18] =>  0:00
   CLOCK: [2013-12-05 Thu 18:41]--[2013-12-05 Thu 19:55] =>  1:14

* 2013-12-09
** Evaluations
   CLOCK: [2013-12-09 Mon 03:18]--[2013-12-09 Mon 04:08] =>  0:50
** Accounting API
   CLOCK: [2013-12-09 Mon 20:49]--[2013-12-09 Mon 22:17] =>  1:28
   CLOCK: [2013-12-09 Mon 19:10]--[2013-12-09 Mon 20:40] =>  1:30
   CLOCK: [2013-12-09 Mon 17:14]--[2013-12-09 Mon 18:24] =>  1:10
   CLOCK: [2013-12-09 Mon 04:57]--[2013-12-09 Mon 05:09] =>  0:12
   CLOCK: [2013-12-09 Mon 04:08]--[2013-12-09 Mon 04:57] =>  0:49
* 2013-12-10
** Accounting API
   CLOCK: [2013-12-11 Wed 00:24]--[2013-12-11 Wed 00:43] =>  0:19
   CLOCK: [2013-12-10 Tue 22:03]--[2013-12-11 Wed 00:24] =>  2:21
   CLOCK: [2013-12-10 Tue 21:16]--[2013-12-10 Tue 21:22] =>  0:06
   CLOCK: [2013-12-10 Tue 19:52]--[2013-12-10 Tue 19:55] =>  0:03
   CLOCK: [2013-12-10 Tue 19:52]--[2013-12-10 Tue 19:52] =>  0:00
* 2013-12-11
** Accounting API
   CLOCK: [2013-12-11 Wed 13:52]--[2013-12-11 Wed 15:27] =>  1:35
   CLOCK: [2013-12-11 Wed 09:34]--[2013-12-11 Wed 09:54] =>  0:20
   CLOCK: [2013-12-11 Wed 09:10]--[2013-12-11 Wed 09:34] =>  0:24
   CLOCK: [2013-12-11 Wed 08:06]--[2013-12-11 Wed 08:36] =>  0:30
   CLOCK: [2013-12-11 Wed 08:36]--[2013-12-11 Wed 09:10] =>  0:34
** Evaluations
   CLOCK: [2013-12-11 Wed 13:49]--[2013-12-11 Wed 13:52] =>  0:03
* 2013-12-12
** Accounting API
   CLOCK: [2013-12-12 Thu 22:00]--[2013-12-12 Thu 22:48] =>  0:48
   CLOCK: [2013-12-12 Thu 18:49]--[2013-12-12 Thu 21:35] =>  2:46
   CLOCK: [2013-12-12 Thu 13:39]--[2013-12-12 Thu 15:20] =>  1:41
   CLOCK: [2013-12-12 Thu 08:11]--[2013-12-12 Thu 10:53] =>  2:42

* 2013-12-14
** Accounting API
   CLOCK: [2013-12-14 Sat 12:36]--[2013-12-14 Sat 16:36] =>  4:00
   CLOCK: [2013-12-14 Sat 11:24]--[2013-12-14 Sat 11:31] =>  0:07
   CLOCK: [2013-12-14 Sat 10:40]--[2013-12-14 Sat 11:24] =>  0:44
*** Editing of transactions?
    There seems to be no easy way to do this in ledger. To do this we
    sould have to find out the location of the source text for the
    transaction within the ledger file, and that would require
    hooking in somewhere in the parser, or getting the information
    from the parser, which would require us interfacing directly with
    the ledger C++ source code AFAICT.

    We could provide a way to 'reverse' a transaction. If a
    transaction is wrongfully entered we keep it but create another
    transaction to reverse the transactions. This is in fact required
    in Swedish accounting principles and/or laws.
**** Looked at sources
     - Looked at the ledger C++ source code, couldn't understand very
       much of it.
     - Looked at the hledger and ledger4 haskell souce code
*** Storage API
    Ledger() uses the Transaction, Account, ... "models"
    (i.e. classes) to marshal data from Ledger() to the REST API.

    A replacement for Ledger() would also parse and tranport these
    "models". Luckily these models are easily serializable thanks to
    the stuff in accounting.transport.
    
* 2013-12-16
** Evaluations
   CLOCK: [2013-12-16 Mon 03:39]--[2013-12-16 Mon 04:21] =>  0:42
** Accounting API
   CLOCK: [2013-12-16 Mon 14:50]--[2013-12-16 Tue 16:32] =>  1:42
   CLOCK: [2013-12-16 Mon 12:58]--[2013-12-16 Mon 13:25] =>  0:27
   CLOCK: [2013-12-16 Mon 04:21]--[2013-12-16 Mon 07:40] =>  3:19
* 2013-12-17
** Accounting API
   CLOCK: [2013-12-17 Tue 13:20]--[2013-12-17 Tue 16:52] =>  3:32
   CLOCK: [2013-12-17 Tue 13:00]--[2013-12-17 Tue 13:20] =>  0:20
   CLOCK: [2013-12-17 Tue 10:13]--[2013-12-17 Tue 11:21] =>  1:08
   CLOCK: [2013-12-17 Tue 09:50]--[2013-12-17 Tue 10:13] =>  0:23
   CLOCK: [2013-12-17 Tue 09:14]--[2013-12-17 Tue 09:50] =>  0:36
   CLOCK: [2013-12-17 Tue 07:47]--[2013-12-17 Tue 08:58] =>  1:11
   CLOCK: [2013-12-17 Tue 05:32]--[2013-12-17 Tue 06:50] =>  1:18
* 2013-12-18
** Accounting API
   CLOCK: [2013-12-19 Thu 00:03]--[2013-12-19 Thu 00:06] =>  0:03
   CLOCK: [2013-12-18 Wed 21:10]--[2013-12-19 Thu 00:03] =>  2:53
   CLOCK: [2013-12-18 Wed 18:16]--[2013-12-18 Wed 20:03] =>  1:47
   CLOCK: [2013-12-18 Wed 18:00]--[2013-12-18 Wed 18:16] =>  0:16
* 2013-12-19
** Accounting API
   CLOCK: [2013-12-19 Thu 09:42]--[2013-12-19 Thu 13:43] =>  4:01
* 2013-12-20
** Accounting Client
   CLOCK: [2013-12-20 Fri 13:45]--[2013-12-20 Fri 17:09] =>  3:24
   CLOCK: [2013-12-20 Fri 10:39]--[2013-12-20 Fri 13:01] =>  2:22
** Unit tests
   CLOCK: [2013-12-21 Sat 00:24]--[2013-12-21 Sat 00:29] =>  0:05
   CLOCK: [2013-12-21 Sat 00:23]--[2013-12-21 Sat 00:23] =>  0:00
   CLOCK: [2013-12-21 Sat 00:14]--[2013-12-21 Sat 00:23] =>  0:09
   CLOCK: [2013-12-21 Sat 00:13]--[2013-12-21 Sat 00:14] =>  0:01
   CLOCK: [2013-12-20 Fri 22:52]--[2013-12-21 Sat 00:13] =>  1:21
   CLOCK: [2013-12-20 Fri 17:09]--[2013-12-20 Fri 17:40] =>  0:31

* 2013-12-26
** Accounting API
   CLOCK: [2013-12-26 Thu 18:42]--[2013-12-26 Thu 21:50] =>  3:08
   CLOCK: [2013-12-26 Thu 13:13]--[2013-12-26 Thu 14:51] =>  1:38
   CLOCK: [2013-12-26 Thu 09:57]--[2013-12-26 Thu 10:40] =>  0:43
   CLOCK: [2013-12-26 Thu 09:56]--[2013-12-26 Thu 09:57] =>  0:01
   CLOCK: [2013-12-26 Thu 09:24]--[2013-12-26 Thu 09:56] =>  0:32
*** Unit Tests
*** Ledger versioning
    Perhaps git should be used to keep versions of the ledger file.

    GitPython seems to be the best(only?) library for git integration
    in python. However, it is only compatible with python 2.x. I'm
    trying to use 2to3 to make it compatible with python 3.
* 2013-12-29
** Accounting API
   CLOCK: [2013-12-29 Sun 21:17]--[2013-12-29 Sun 22:49] =>  1:32
   CLOCK: [2013-12-29 Sun 14:14]--[2013-12-29 Sun 16:14] =>  2:00
   CLOCK: [2013-12-29 Sun 13:25]--[2013-12-29 Sun 13:46] =>  0:21
* Summary
#+BEGIN: clocktable :maxlevel 2 :emphasize nil :scope file
#+CAPTION: Clock summary at [2014-01-01 Wed 19:27]
| Headline                        |      Time |      |
|---------------------------------+-----------+------|
| *Total time*                    | *3d 5:52* |      |
|---------------------------------+-----------+------|
| 2013-12-02                      |      0:56 |      |
| \__ Evaluations                 |           | 0:56 |
| 2013-12-03                      |      4:15 |      |
| \__ Concerns re: accounting API |           | 4:15 |
| 2013-12-04                      |      3:52 |      |
| \__ Accounting API              |           | 0:56 |
| \__ Evaluations                 |           | 2:56 |
| 2013-12-05                      |      2:21 |      |
| \__ Accounting API              |           | 1:07 |
| \__ Evaluations                 |           | 1:14 |
| 2013-12-09                      |      5:59 |      |
| \__ Evaluations                 |           | 0:50 |
| \__ Accounting API              |           | 5:09 |
| 2013-12-10                      |      2:49 |      |
| \__ Accounting API              |           | 2:49 |
| 2013-12-11                      |      3:26 |      |
| \__ Accounting API              |           | 3:23 |
| \__ Evaluations                 |           | 0:03 |
| 2013-12-12                      |      7:57 |      |
| \__ Accounting API              |           | 7:57 |
| 2013-12-14                      |      4:51 |      |
| \__ Accounting API              |           | 4:51 |
| 2013-12-16                      |      6:10 |      |
| \__ Evaluations                 |           | 0:42 |
| \__ Accounting API              |           | 5:28 |
| 2013-12-17                      |      8:28 |      |
| \__ Accounting API              |           | 8:28 |
| 2013-12-18                      |      4:59 |      |
| \__ Accounting API              |           | 4:59 |
| 2013-12-19                      |      4:01 |      |
| \__ Accounting API              |           | 4:01 |
| 2013-12-20                      |      7:53 |      |
| \__ Accounting Client           |           | 5:46 |
| \__ Unit tests                  |           | 2:07 |
| 2013-12-26                      |      6:02 |      |
| \__ Accounting API              |           | 6:02 |
| 2013-12-29                      |      3:53 |      |
| \__ Accounting API              |           | 3:53 |
#+END: clocktable
